; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--debug -c --asm -o..\Output\cal_sampdata.o --depend=..\Output\cal_sampdata.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\src -I.\inc -I..\CMSIS -I"E:\Keil 4 ARM\ARM\RV31\Inc" -I"E:\Keil 4 ARM\ARM\CMSIS\Include" -I"E:\Keil 4 ARM\ARM\Inc\ST\STM32F10x" -DSTM32F10X_CL --omf_browse=..\Output\cal_sampdata.crf src\Cal_Sampdata.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

Cal_Init PROC
        PUSH     {r4-r6,lr}
        LDR      r4,[sp,#0x10]
        ADD      r5,r2,r3,LSL #1
        LDRH     r5,[r5,r4,LSL #1]
        SUB      r6,r5,#0x400
        SUBS     r6,r6,#0x53
        BEQ      |L1.22|
|L1.20|
        POP      {r4-r6,pc}
|L1.22|
        B        |L1.36|
|L1.24|
        LDRH     r5,[r2],#2
        STRH     r5,[r0],#2
        SUBS     r5,r3,#1
        UXTH     r3,r5
|L1.36|
        CMP      r3,#0
        BNE      |L1.24|
        B        |L1.54|
|L1.42|
        LDRH     r6,[r2],#2
        STRB     r6,[r1],#1
        SUBS     r5,r4,#1
        UXTH     r4,r5
|L1.54|
        CMP      r4,#0
        BNE      |L1.42|
        NOP      
        B        |L1.20|
        ENDP

Cal_Val_Get PROC
        PUSH     {r4-r11,lr}
        MOV      r6,r0
        MOV      r12,r2
        CMP      r1,#4
        BEQ      |L1.78|
        CMP      r1,#5
        BNE      |L1.92|
|L1.78|
        MOVS     r7,#0
        LDR      r0,|L1.632|
        MULS     r0,r3,r0
        ADD      r8,r7,r0,LSL #6
        MOVS     r4,#0xa
        B        |L1.104|
|L1.92|
        LDR      r7,|L1.636|
        ASRS     r0,r7,#9
        MULS     r0,r3,r0
        ADD      r8,r7,r0,LSL #7
        MOVS     r4,#0xc
|L1.104|
        ADD      r0,r1,r1,LSL #2
        ADD      r0,r0,r1,LSL #3
        LDR      r10,|L1.640|
        ADD      r0,r10,r0,LSL #1
        LDRH     r0,[r0,r3,LSL #1]
        CMP      r0,r6
        BLT      |L1.176|
        ADD      r0,r1,r1,LSL #2
        ADD      r0,r0,r1,LSL #3
        ADD      r0,r10,r0,LSL #1
        LDRH     r2,[r0,r3,LSL #1]
        UDIV     r0,r8,r2
        UDIV     r10,r8,r2
        MLS      r10,r2,r10,r8
        LSR      r11,r2,#1
        UDIV     r10,r10,r11
        ADD      r2,r0,r10
        MUL      r0,r6,r2
|L1.172|
        POP      {r4-r11,pc}
|L1.176|
        ADDS     r0,r4,r3
        ADD      r10,r0,r0,LSR #31
        UBFX     r5,r10,#1,#8
        NOP      
|L1.188|
        ADD      r0,r1,r1,LSL #2
        ADD      r0,r0,r1,LSL #3
        LDR      r10,|L1.640|
        ADD      r0,r10,r0,LSL #1
        LDRH     r0,[r0,r5,LSL #1]
        CMP      r0,r6
        BLE      |L1.216|
        MOV      r4,r5
        B        |L1.248|
|L1.216|
        ADD      r0,r1,r1,LSL #2
        ADD      r0,r0,r1,LSL #3
        LDR      r10,|L1.640|
        ADD      r0,r10,r0,LSL #1
        LDRH     r0,[r0,r5,LSL #1]
        CMP      r0,r6
        BGE      |L1.244|
        MOV      r3,r5
        B        |L1.248|
|L1.244|
        MOV      r4,r5
        B        |L1.262|
|L1.248|
        ADDS     r0,r4,r3
        ADD      r10,r0,r0,LSR #31
        UBFX     r5,r10,#1,#8
        CMP      r5,r3
        BNE      |L1.188|
|L1.262|
        NOP      
        ADD      r0,r1,r1,LSL #2
        ADD      r0,r0,r1,LSL #3
        LDR      r10,|L1.640|
        ADD      r0,r10,r0,LSL #1
        LDRH     r10,[r0,r4,LSL #1]
        ADD      r0,r1,r1,LSL #2
        ADD      r0,r0,r1,LSL #3
        LDR      r11,|L1.640|
        ADD      r11,r11,r0,LSL #1
        SUBS     r0,r4,#1
        LDRH     r0,[r11,r0,LSL #1]
        SUB      r2,r10,r0
        UDIV     r0,r12,r2
        UDIV     r10,r12,r2
        MLS      r10,r2,r10,r12
        LSR      r11,r2,#1
        UDIV     r10,r10,r11
        ADD      r2,r0,r10
        MLA      r9,r12,r4,r7
        ADD      r0,r1,r1,LSL #2
        ADD      r0,r0,r1,LSL #3
        LDR      r10,|L1.640|
        ADD      r0,r10,r0,LSL #1
        LDRH     r0,[r0,r4,LSL #1]
        MLS      r9,r2,r0,r9
        MLA      r0,r6,r2,r9
        B        |L1.172|
        ENDP

Cal_ADdata_Copy PROC
        PUSH     {r4,r5,lr}
        LDRH     r3,[r1,#0x12]
        LSLS     r4,r0,#1
        ASRS     r3,r3,r4
        AND      r3,r3,#3
        CMP      r3,#1
        BNE      |L1.410|
        LDRH     r3,[r1,#0x12]
        LSLS     r5,r0,#1
        MOVS     r4,#3
        LSLS     r4,r4,r5
        BICS     r3,r3,r4
        STRH     r3,[r1,#0x12]
        LDRH     r3,[r1,#0x12]
        LSLS     r5,r0,#1
        MOVS     r4,#2
        LSLS     r4,r4,r5
        ORRS     r3,r3,r4
        STRH     r3,[r1,#0x12]
|L1.408|
        POP      {r4,r5,pc}
|L1.410|
        LDRH     r3,[r1,#0x12]
        LSLS     r4,r0,#1
        ASRS     r3,r3,r4
        AND      r3,r3,#3
        CMP      r3,#2
        BNE      |L1.560|
        LDRB     r3,[r1,#1]
        CMP      r3,#9
        BCS      |L1.512|
        TBB      [pc,r3]
        DCB      0x05,0x11
        DCB      0x27,0x1d,0x27,0x27
        DCB      0x1e,0x06,0x12,0x00
        NOP      
        LDR      r4,|L1.644|
        LDR      r3,[r1,#8]
        UDIV     r4,r3,r4
        LDRH     r3,[r1,#0x14]
        SUB      r3,r3,#0x7d0
        UDIV     r3,r3,r4
        UXTB     r2,r3
        B        |L1.514|
        NOP      
        LDR      r4,|L1.644|
        LDR      r3,[r1,#8]
        UDIV     r4,r3,r4
        LDRH     r3,[r1,#0x16]
        SUB      r3,r3,#0x7d0
        UDIV     r3,r3,r4
        UXTB     r2,r3
        B        |L1.514|
        NOP      
        LDR      r4,|L1.644|
        LDR      r3,[r1,#0xc]
        UDIV     r3,r3,r4
        LDRH     r4,[r1,#0x18]
        UDIV     r3,r4,r3
        UXTB     r2,r3
        B        |L1.514|
|L1.512|
        B        |L1.408|
|L1.514|
        NOP      
        LDRB     r3,[r1,#1]
        LDR      r4,|L1.648|
        ADD      r3,r4,r3,LSL #4
        LDRH     r3,[r3,#4]
        SUB      r3,r3,#0x5000
        ADD      r4,r0,r0,LSL #2
        ADD      r4,r4,r0,LSL #3
        LDR      r5,|L1.640|
        ADD      r4,r5,r4,LSL #1
        STRH     r3,[r4,r2,LSL #1]
        LDRH     r3,[r1,#0x12]
        LSLS     r5,r0,#1
        MOVS     r4,#3
        LSLS     r4,r4,r5
        BICS     r3,r3,r4
        STRH     r3,[r1,#0x12]
|L1.560|
        NOP      
        B        |L1.408|
        ENDP

Cal_ADscream_Change PROC
        MOV      r1,r0
        LDRB     r0,[r1,#1]
        CMP      r0,#9
        BCS      |L1.622|
        TBB      [pc,r0]
        DCB      0x05,0x0b,0x17,0x11
        DCB      0x17,0x17,0x14,0x08
        DCB      0x0e,0x00
        MOVS     r0,#7
        STRB     r0,[r1,#0]
        B        |L1.626|
        MOVS     r0,#1
        STRB     r0,[r1,#0]
        B        |L1.626|
        MOVS     r0,#8
        STRB     r0,[r1,#0]
        B        |L1.626|
        MOVS     r0,#3
        STRB     r0,[r1,#0]
        B        |L1.626|
        MOVS     r0,#6
        STRB     r0,[r1,#0]
        B        |L1.626|
        MOVS     r0,#0
        STRB     r0,[r1,#0]
        B        |L1.626|
|L1.622|
        MOVS     r0,#1
|L1.624|
        BX       lr
|L1.626|
        NOP      
        MOVS     r0,#0
        B        |L1.624|
        ENDP

|L1.632|
        DCD      0x00039387
|L1.636|
        DCD      0x0bebc200
|L1.640|
        DCD      DATA_SAMPLE_ADPOINT
|L1.644|
        DCD      0x000186a0
|L1.648|
        DCD      Samp_DataArr

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.data||, DATA, ALIGN=1

DATA_SAMPLE_ADPOINT
        DCW      0x13c4,0x1888
        DCW      0x1d4c,0x2210
        DCW      0x26d4,0x2b98
        DCW      0x3052,0x34e4
        DCW      0x3962,0x3d9a
        DCW      0x43bc,0x49de
        DCW      0x4ff6,0x13c4
        DCW      0x1888,0x1d4c
        DCW      0x2210,0x26d4
        DCW      0x2b98,0x3052
        DCW      0x34e4,0x3962
        DCW      0x3d9a,0x43bc
        DCW      0x49de,0x4ff6
        DCW      0x13c4,0x1888
        DCW      0x1d4c,0x2210
        DCW      0x26d4,0x2b98
        DCW      0x3052,0x34e4
        DCW      0x3962,0x3d9a
        DCW      0x43bc,0x49de
        DCW      0x4ff6,0x13c4
        DCW      0x1888,0x1d4c
        DCW      0x2210,0x26d4
        DCW      0x2b98,0x3052
        DCW      0x34e4,0x3962
        DCW      0x3d9a,0x43bc
        DCW      0x49de,0x4ff6
        DCW      0x0000,0x073a
        DCW      0x0e42,0x1540
        DCW      0x1c48,0x2332
        DCW      0x2a44,0x30d4
        DCW      0x37a0,0x3dfe
        DCW      0x43b2,0x49d4
        DCW      0x4fec,0x0000
        DCW      0x073a,0x0e42
        DCW      0x1540,0x1c48
        DCW      0x2332,0x2a44
        DCW      0x30d4,0x37a0
        DCW      0x3dfe,0x43b2
        DCW      0x49d4,0x4fec

        EXPORT Cal_Init [CODE]
        EXPORT Cal_Val_Get [CODE]
        EXPORT Cal_ADdata_Copy [CODE]
        EXPORT Cal_ADscream_Change [CODE]
        EXPORT DATA_SAMPLE_ADPOINT [DATA,SIZE=156]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT Samp_DataArr [DATA]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
