; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--debug -c --asm -o..\Output\data_pro.o --depend=..\Output\data_pro.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src -I.\inc -I..\CMSIS -I"E:\Keil 4 ARM\ARM\RV31\Inc" -I"E:\Keil 4 ARM\ARM\CMSIS\Include" -I"E:\Keil 4 ARM\ARM\Inc\ST\STM32F10x" -DSTM32F10X_CL --omf_browse=..\Output\data_pro.crf src\DATA_pro.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

bigenddata_copy PROC
        MOV      r3,r0
        MOV      r0,r1
        B        |L1.22|
|L1.6|
        LDRB     r1,[r3,#0]
        STRB     r1,[r0,#1]
        LDRB     r1,[r3,#1]
        ADDS     r3,r3,#2
        STRB     r1,[r0],#2
        SUBS     r2,r2,#2
        UXTB     r2,r2
|L1.22|
        CMP      r2,#0
        BNE      |L1.6|
        BX       lr
        ENDP

TXdata_proc PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r3,r1
        LDR      r6,|L1.704|
        MOV      r0,r6
        LDRB     r1,[r6,#0]  ; Head_Data
        STRB     r1,[r4,#5]
        LDRH     r0,[r0,#6]
        CMP      r1,#3
        BEQ      |L1.76|
        CMP      r1,#0x10
        BEQ      |L1.112|
        LDRB     r0,[r6,#1]  ; Head_Data
        STRB     r0,[r4,#6]
        ADDS     r5,r4,#7
        MOVS     r1,#7
        MOV      r0,r4
        BL       CRC16_CAL
        STRH     r0,[r5,#0]
|L1.68|
        SUBS     r0,r5,r4
        ADDS     r0,r0,#2
        UXTH     r0,r0
        POP      {r4-r6,pc}
|L1.76|
        LSLS     r0,r0,#25
        LSRS     r2,r0,#24
        STRB     r2,[r4,#6]
        ADDS     r1,r4,#7
        MOV      r0,r3
        BL       bigenddata_copy
        MOV      r5,r0
        LDRH     r0,[r6,#6]  ; Head_Data
        MOVS     r1,#7
        ADD      r0,r1,r0,LSL #1
        UXTB     r1,r0
        MOV      r0,r4
        BL       CRC16_CAL
        STRH     r0,[r5,#0]
        B        |L1.68|
|L1.112|
        LDRH     r1,[r6,#4]  ; Head_Data
        LSLS     r2,r1,#8
        ORR      r1,r2,r1,LSR #8
        STRB     r1,[r4,#6]
        LSLS     r1,r0,#8
        ORR      r0,r1,r0,LSR #8
        STRB     r0,[r4,#8]
        ADD      r5,r4,#0xa
        MOVS     r1,#0xa
        MOV      r0,r4
        BL       CRC16_CAL
        STRH     r0,[r5,#0]
        B        |L1.68|
        ENDP

RXdata_proc PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOVS     r0,#0
        LDR      r5,|L1.704|
        LDRB     r2,[r5,#0]  ; Head_Data
        CMP      r2,#0x10
        BNE      |L1.262|
        ADDS     r4,r4,#6
        MOV      r3,r5
        LDRH     r2,[r5,#4]  ; Head_Data
        LDRH     r3,[r3,#6]
        CMP      r2,#0xf
        BEQ      |L1.224|
        BGT      |L1.182|
        CBZ      r2,|L1.192|
        CMP      r2,#2
        BNE      |L1.246|
        B        |L1.208|
|L1.182|
        CMP      r2,#0x12
        BEQ      |L1.246|
        CMP      r2,#0x13
        BNE      |L1.246|
        B        |L1.240|
|L1.192|
        CMP      r3,#2
        BEQ      |L1.200|
        MOVS     r0,#1
        B        |L1.246|
|L1.200|
        MOV      r0,r4
        BL       OutputCmd_DataPro
        B        |L1.246|
|L1.208|
        CMP      r3,#0xd
        BEQ      |L1.216|
        MOVS     r0,#1
        B        |L1.246|
|L1.216|
        MOV      r0,r4
        BL       ADSampe_LimitDataPro
        B        |L1.246|
|L1.224|
        CMP      r3,#3
        BEQ      |L1.232|
        MOVS     r0,#1
        B        |L1.246|
|L1.232|
        MOV      r0,r4
        BL       Cal_DataPro
        B        |L1.246|
|L1.240|
        CMP      r3,#8
        BEQ      |L1.264|
        MOVS     r0,#1
|L1.246|
        CMP      r0,#0
        BEQ      |L1.262|
        LDRB     r1,[r5,#0]  ; Head_Data
        ORR      r1,r1,#0x80
        STRB     r1,[r5,#0]
        MOVS     r1,#6
        STRB     r1,[r5,#1]
|L1.262|
        POP      {r4-r6,pc}
|L1.264|
        MOV      r0,r4
        BL       IOMemb_DataPro
        B        |L1.246|
        ENDP

RXdata_confirm PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        LDR      r6,|L1.704|
        LDRB     r0,[r4,#5]
        STRB     r0,[r6,#0]
        LDR      r1,|L1.708|
        LDRB     r1,[r1,#0]  ; U1_RXfin
        LSLS     r1,r1,#24
        BPL      |L1.310|
        ORR      r0,r0,#0x80
        STRB     r0,[r6,#0]
        MOVS     r0,#7
        STRB     r0,[r6,#1]
        MOVS     r0,#5
|L1.306|
        POP      {r4-r8,pc}
|L1.310|
        CMP      r5,#5
        BCS      |L1.318|
        MOVS     r0,#6
        B        |L1.306|
|L1.318|
        SUBS     r0,r5,#2
        UXTB     r1,r0
        MOV      r0,r4
        BL       CRC16_CAL
        ADDS     r1,r4,r5
        LDRH     r1,[r1,#-2]
        CMP      r0,r1
        BEQ      |L1.354|
        LDRB     r0,[r6,#0]  ; Head_Data
        ORR      r0,r0,#0x80
        STRB     r0,[r6,#0]
        MOVS     r0,#5
        STRB     r0,[r6,#1]
        MOVS     r0,#1
        B        |L1.306|
|L1.354|
        LDRB     r0,[r6,#0]  ; Head_Data
        MOVS     r3,#3
        MOVS     r5,#2
        CMP      r0,#3
        BEQ      |L1.382|
        CMP      r0,#0x10
        BEQ      |L1.440|
        ORR      r0,r0,#0x80
        STRB     r0,[r6,#0]
        MOVS     r0,#1
        STRB     r0,[r6,#1]
        MOVS     r0,#2
        B        |L1.306|
|L1.382|
        LDRH     r0,[r4,#6]
        LDRH     r1,[r4,#8]
        LSLS     r2,r0,#8
        ORR      r0,r2,r0,LSR #8
        UXTH     r2,r0
        STRH     r2,[r6,#4]
        LSLS     r0,r1,#8
        ORR      r0,r0,r1,LSR #8
        UXTH     r0,r0
        STRH     r0,[r6,#6]
        SUBS     r4,r0,#1
        MOVS     r1,#0x83
        CMP      r4,#0x7d
        BCC      |L1.422|
        STRB     r1,[r6,#0]
        STRB     r3,[r6,#1]
        MOVS     r0,#3
        B        |L1.306|
|L1.422|
        CMP      r2,#0x20
        BCC      |L1.432|
        ADD      r0,r0,r2
        CMP      r0,#0x34
        BLS      |L1.504|
|L1.432|
        STRB     r1,[r6,#0]
        STRB     r5,[r6,#1]
        MOVS     r0,#4
        B        |L1.306|
|L1.440|
        LDRH     r1,[r4,#6]
        LDRH     r0,[r4,#8]
        LDRB     r2,[r4,#0xa]
        STRB     r2,[r6,#2]
        LSLS     r4,r1,#8
        ORR      r1,r4,r1,LSR #8
        UXTH     r1,r1
        STRH     r1,[r6,#4]
        LSLS     r4,r0,#8
        ORR      r0,r4,r0,LSR #8
        UXTH     r0,r0
        STRH     r0,[r6,#6]
        SUBS     r4,r0,#1
        MOVS     r7,#0x90
        CMP      r4,#0x7b
        BCS      |L1.482|
        CMP      r2,r0,LSL #1
        BEQ      |L1.490|
|L1.482|
        STRB     r7,[r6,#0]
        STRB     r3,[r6,#1]
        MOVS     r0,#3
        B        |L1.306|
|L1.490|
        ADD      r0,r0,r1
        CMP      r0,#0x1b
        BLS      |L1.504|
        STRB     r7,[r6,#0]
        STRB     r5,[r6,#1]
        MOVS     r0,#4
        B        |L1.306|
|L1.504|
        MOVS     r0,#0
        B        |L1.306|
        ENDP

DATA_RecProc PROC
        PUSH     {r4-r8,lr}
        MOV      r7,r0
        MOV      r4,r2
        LDRH     r1,[r1,#0]
        MOV      r0,r7
        BL       RXdata_confirm
        MOVS     r6,#2
        LDR      r8,|L1.708|
        LDR      r5,|L1.712|
        CMP      r0,#6
        BEQ      |L1.622|
        LDR      r1,|L1.716|
        MOV      r0,#0x1388
        STRH     r0,[r1,#0]
        LDR      r3,|L1.720|
        LDRH     r0,[r3,#0]
        BIC      r0,r0,#1
        STRH     r0,[r3,#0]
        LDR      r1,|L1.724|
        LDRB     r0,[r1,#0]  ; Systimememb
        AND      r0,r0,#0xfd
        STRB     r0,[r1,#0]
        LDRH     r0,[r3,#0]
        ORR      r0,r0,#1
        STRH     r0,[r3,#0]
        LDRH     r0,[r4,#4]
        BIC      r0,r0,#1
        STRH     r0,[r4,#4]
        MOV      r1,r4
        ADDS     r0,r7,#5
        BL       RXdata_proc
        STRB     r6,[r8,#0]
        LDR      r0,|L1.728|
        LDRB     r1,[r0,#0]  ; U1_TXfin
        ORR      r1,r1,#1
        STRB     r1,[r0,#0]
        LDR      r1,|L1.732|
        MOVS     r0,#0x14
        STRH     r0,[r1,#0]
        LDR      r0,|L1.736|
        STRB     r6,[r0,#0]
        LDRH     r0,[r5,#0]
        ORR      r0,r0,#8
        STRH     r0,[r5,#0]
        B        |L1.642|
|L1.622|
        STRB     r6,[r8,#0]
        LDR      r1,|L1.740|
        MOV      r0,#0x1000000
        STR      r0,[r1,#0]
        LDRH     r0,[r5,#0]
        ORR      r0,r0,#4
        STRH     r0,[r5,#0]
|L1.642|
        MOVS     r0,#0
        B        |L1.306|
        ENDP

DATA_TraProc PROC
        PUSH     {r4,lr}
        MOV      r4,r1
        MOV      r1,r2
        BL       TXdata_proc
        STRH     r0,[r4,#0]
        LDR      r0,|L1.728|
        LDRB     r1,[r0,#0]  ; U1_TXfin
        ORR      r1,r1,#4
        STRB     r1,[r0,#0]
        LDR      r0,|L1.720|
        LDRH     r1,[r0,#0]
        BIC      r1,r1,#1
        STRH     r1,[r0,#0]
        LDR      r1,|L1.724|
        LDRB     r2,[r1,#0]  ; Systimememb
        ORR      r2,r2,#2
        STRB     r2,[r1,#0]
        LDRH     r1,[r0,#0]
        ORR      r1,r1,#1
        STRH     r1,[r0,#0]
        BL       USART1_Send
        MOVS     r0,#0
        POP      {r4,pc}
        ENDP

|L1.704|
        DCD      ||.data||
|L1.708|
        DCD      U1_RXfin
|L1.712|
        DCD      0x4001380c
|L1.716|
        DCD      COMMbreaktime
|L1.720|
        DCD      0x40012c0c
|L1.724|
        DCD      Systimememb
|L1.728|
        DCD      U1_TXfin
|L1.732|
        DCD      U1_TXresettime
|L1.736|
        DCD      TXtimememb
|L1.740|
        DCD      0x40010810

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.data||, DATA, ALIGN=1

Head_Data
        %        8

        EXPORT DATA_RecProc [CODE]
        EXPORT DATA_TraProc [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT CRC16_CAL [CODE]
        IMPORT OutputCmd_DataPro [CODE]
        IMPORT ADSampe_LimitDataPro [CODE]
        IMPORT Cal_DataPro [CODE]
        IMPORT IOMemb_DataPro [CODE]
        IMPORT U1_RXfin [DATA]
        IMPORT COMMbreaktime [DATA]
        IMPORT Systimememb [DATA]
        IMPORT U1_TXfin [DATA]
        IMPORT U1_TXresettime [DATA]
        IMPORT TXtimememb [DATA]
        IMPORT USART1_Send [CODE]

        KEEP bigenddata_copy
        KEEP TXdata_proc
        KEEP RXdata_proc
        KEEP RXdata_confirm
        KEEP Head_Data

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,5
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
