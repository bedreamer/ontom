; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--debug -c --asm -o..\Output\ad_sample.o --depend=..\Output\ad_sample.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src -I.\inc -I..\CMSIS -I"E:\Keil 4 ARM\ARM\RV31\Inc" -I"E:\Keil 4 ARM\ARM\CMSIS\Include" -I"E:\Keil 4 ARM\ARM\Inc\ST\STM32F10x" -DSTM32F10X_CL --omf_browse=..\Output\ad_sample.crf src\AD_Sample.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

HUMI_SampData_fun PROC
        MOVS     r0,#0
        BX       lr
        ENDP

TEMP_SampData_fun PROC
        MOVS     r0,#0
        BX       lr
        ENDP

BATI_SampData_fun PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOVS     r4,#0
        LDRB     r7,[r1,#1]
        LDR      r0,|L1.1036|
        ADD      r6,r0,r7,LSL #4
        LDRH     r0,[r6,#4]
        LDRH     r8,[r6,#6]
        LDR      r2,|L1.1040|
        MUL      r8,r8,r2
        CMP      r0,#0x5000
        BLS      |L1.48|
        SUB      r0,r0,#0x5000
        B        |L1.54|
|L1.48|
        RSB      r0,r0,#0x5000
        MOVS     r4,#8
|L1.54|
        LDRB     r3,[r1,#0x11]
        LDR      r2,[r1,#0xc]
        LDRB     r1,[r6,#0xa]
        UXTH     r0,r0
        BL       Cal_Val_Get
        CMP      r0,r8
        BLS      |L1.74|
        ORR      r4,r4,#1
|L1.74|
        LDR      r2,|L1.1040|
        UDIV     r1,r0,r2
        MLS      r0,r2,r1,r0
        ASRS     r2,r2,#1
        UDIV     r0,r0,r2
        ADD      r0,r0,r1
        LSLS     r1,r4,#28
        BPL      |L1.104|
        ORR      r0,r0,#0x8000
        AND      r4,r4,#0xf7
|L1.104|
        CMP      r7,#3
        BEQ      |L1.114|
        CMP      r7,#6
        BNE      |L1.144|
        B        |L1.130|
|L1.114|
        LDRB     r1,[r5,#0x1e]
        BIC      r1,r1,#0x20
        ORR      r1,r1,r4,LSL #5
        STRB     r1,[r5,#0x1e]
        STRH     r0,[r5,#8]
        B        |L1.144|
|L1.130|
        LDRB     r1,[r5,#0x1e]
        BIC      r1,r1,#0x20
        ORR      r1,r1,r4,LSL #5
        STRB     r1,[r5,#0x1e]
        STRH     r0,[r5,#0xa]
|L1.144|
        MOVS     r0,#0
        POP      {r4-r8,pc}
        ENDP

MXU_SampData_fun PROC
        PUSH     {r4-r10,lr}
        MOV      r5,r0
        MOVS     r4,#0
        LDRB     r7,[r1,#1]
        LDR      r0,|L1.1036|
        ADD      r6,r0,r7,LSL #4
        LDRH     r0,[r6,#4]
        LDRH     r8,[r6,#8]
        LDR      r2,|L1.1040|
        MUL      r8,r8,r2
        LDRH     r9,[r6,#6]
        MUL      r9,r9,r2
        CMP      r0,#0x5000
        BCC      |L1.198|
        SUB      r0,r0,#0x5000
        B        |L1.204|
|L1.198|
        RSB      r0,r0,#0x5000
        MOVS     r4,#8
|L1.204|
        LDRB     r3,[r1,#0x10]
        LDR      r2,[r1,#8]
        LDRB     r1,[r6,#0xa]
        UXTH     r0,r0
        BL       Cal_Val_Get
        CMP      r0,r9
        BLS      |L1.226|
        ORR      r4,r4,#1
        B        |L1.234|
|L1.226|
        CMP      r0,r8
        BCS      |L1.234|
        ORR      r4,r4,#2
|L1.234|
        LDR      r2,|L1.1040|
        UDIV     r1,r0,r2
        MLS      r0,r2,r1,r0
        ASRS     r2,r2,#1
        UDIV     r0,r0,r2
        ADD      r0,r0,r1
        LSLS     r1,r4,#28
        BPL      |L1.264|
        ORR      r0,r0,#0x8000
        AND      r4,r4,#0xf7
|L1.264|
        CBZ      r7,|L1.272|
        CMP      r7,#1
        BNE      |L1.300|
        B        |L1.286|
|L1.272|
        LDRB     r1,[r5,#0x1d]
        BIC      r1,r1,#7
        ORRS     r1,r1,r4
        STRB     r1,[r5,#0x1d]
        STRH     r0,[r5,#0]
        B        |L1.300|
|L1.286|
        LDRB     r1,[r5,#0x1d]
        BIC      r1,r1,#0x38
        ORR      r1,r1,r4,LSL #3
        STRB     r1,[r5,#0x1d]
        STRH     r0,[r5,#2]
|L1.300|
        MOVS     r0,#0
|L1.302|
        POP      {r4-r10,pc}
        ENDP

BATU_SampData_fun PROC
        PUSH     {r4-r10,lr}
        MOV      r5,r0
        MOVS     r4,#0
        LDRB     r7,[r1,#1]
        LDR      r0,|L1.1036|
        ADD      r6,r0,r7,LSL #4
        LDRH     r0,[r6,#4]
        LDRH     r8,[r6,#8]
        LDR      r2,|L1.1040|
        MUL      r8,r8,r2
        LDRH     r9,[r6,#6]
        MUL      r9,r9,r2
        CMP      r0,#0x5000
        BCC      |L1.354|
        SUB      r0,r0,#0x5000
        B        |L1.360|
|L1.354|
        RSB      r0,r0,#0x5000
        MOVS     r4,#0x10
|L1.360|
        LDRB     r3,[r1,#0x10]
        LDR      r2,[r1,#8]
        LDRB     r1,[r6,#0xa]
        UXTH     r0,r0
        BL       Cal_Val_Get
        LSLS     r1,r4,#27
        BPL      |L1.386|
        LDR      r1,|L1.1044|
        CMP      r0,r1
        BLS      |L1.386|
        ORR      r4,r4,#8
|L1.386|
        LDR      r1,|L1.1048|
        CMP      r0,r1
        BCS      |L1.396|
        ORR      r4,r4,#4
|L1.396|
        CMP      r0,r9
        BLS      |L1.406|
        ORR      r4,r4,#1
        B        |L1.414|
|L1.406|
        CMP      r0,r8
        BCS      |L1.414|
        ORR      r4,r4,#2
|L1.414|
        LDR      r2,|L1.1040|
        UDIV     r1,r0,r2
        MLS      r0,r2,r1,r0
        ASRS     r2,r2,#1
        UDIV     r0,r0,r2
        ADD      r0,r0,r1
        LSLS     r1,r4,#27
        BPL      |L1.444|
        ORR      r0,r0,#0x8000
        AND      r4,r4,#0xef
|L1.444|
        CMP      r7,#7
        BEQ      |L1.454|
        CMP      r7,#8
        BNE      |L1.480|
        B        |L1.468|
|L1.454|
        LDRB     r1,[r5,#0x1e]
        BIC      r1,r1,#0xf
        ORRS     r1,r1,r4
        STRB     r1,[r5,#0x1e]
        STRH     r0,[r5,#4]
        B        |L1.480|
|L1.468|
        LDRB     r1,[r5,#0x1f]
        BIC      r1,r1,#0xf
        ORRS     r1,r1,r4
        STRB     r1,[r5,#0x1f]
        STRH     r0,[r5,#6]
|L1.480|
        MOVS     r0,#0
        B        |L1.302|
        ENDP

JYBATP_SampData_fun PROC
        MOVS     r0,#0
        BX       lr
        ENDP

JYBATN_SampData_fun PROC
        MOVS     r0,#0
        BX       lr
        ENDP

JYRES_SampData_fun PROC
        PUSH     {r4-r12,lr}
        MOV      r4,r0
        MOV      r7,r1
        LDRB     r10,[r7,#1]
        LDR      r11,|L1.1036|
        ADD      r8,r11,r10,LSL #4
        LDRH     r0,[r8,#6]
        ADD      r1,r11,r0,LSL #4
        LDRH     r0,[r1,#6]
        ADD      r0,r11,r0,LSL #4
        LDRH     r0,[r0,#4]
        LDRH     r5,[r1,#4]
        LDRH     r6,[r8,#4]
        MOV      r1,#0x5078
        MOV      r2,#0xffffffff
        CMP      r0,r1
        BCC      |L1.740|
        MOV      r3,#0x5000
        CMP      r5,r3
        BNE      |L1.568|
        CMP      r6,r3
        BNE      |L1.568|
        MOVS     r1,#0
        MOVS     r0,#0
        MOVS     r3,#0
        MOVS     r2,#0
        B        |L1.900|
|L1.568|
        CMP      r5,r3
        BNE      |L1.584|
        CMP      r6,r3
        BEQ      |L1.584|
        MOVS     r1,#0
        MOV      r0,r2
        MOVS     r3,#0
        B        |L1.900|
|L1.584|
        CMP      r6,r3
        BNE      |L1.602|
        CMP      r5,r3
        BEQ      |L1.602|
        MOVS     r0,#0
        MOV      r1,r2
        MOV      r3,r1
        MOVS     r2,#0
        B        |L1.900|
|L1.602|
        LDR      r1,|L1.1036|
        SUBS     r1,r1,#8
        LDRB     r1,[r1,#0]  ; Errornum
        CMP      r1,#6
        BCC      |L1.622|
        MOVS     r1,#0
        LDR      r0,|L1.1052|
        MOVS     r3,#0
        MOV      r2,r0
        B        |L1.900|
|L1.622|
        CMP      r0,r3
        BLS      |L1.634|
        CMP      r5,r3
        BLS      |L1.634|
        CMP      r6,r3
        BHI      |L1.646|
|L1.634|
        CMP      r0,r3
        BCS      |L1.728|
        CMP      r5,r3
        BCS      |L1.728|
        CMP      r6,r3
        BCS      |L1.728|
|L1.646|
        SUB      r0,r0,#0x5000
        LDRB     r3,[r7,#0x10]
        LDRB     r1,[r8,#0xa]
        UXTH     r0,r0
        LDR      r2,[r7,#8]
        BL       Cal_Val_Get
        MOV      r9,r0
        SUB      r5,r5,#0x5000
        LDRB     r3,[r7,#0x10]
        LDRB     r1,[r8,#0xa]
        UXTH     r0,r5
        LDR      r2,[r7,#8]
        BL       Cal_Val_Get
        MOV      r5,r0
        SUB      r6,r6,#0x5000
        LDRB     r3,[r7,#0x10]
        LDRB     r1,[r8,#0xa]
        UXTH     r0,r6
        LDR      r2,[r7,#8]
        BL       Cal_Val_Get
        MOV      r1,r0
        ADDS     r0,r5,r1
        CMP      r0,r9
        BLS      |L1.750|
        LDR      r1,|L1.1036|
        SUBS     r1,r1,#8
        LDRB     r0,[r1,#0]  ; Errornum
        ADDS     r0,r0,#1
        STRB     r0,[r1,#0]
        MOVS     r0,#1
|L1.724|
        POP      {r4-r12,pc}
|L1.728|
        LDR      r0,|L1.1036|
        SUBS     r0,r0,#8
        ADDS     r1,r1,#1
        STRB     r1,[r0,#0]
        MOVS     r0,#1
        B        |L1.724|
|L1.740|
        MOV      r0,r2
        MOV      r1,r0
        MOV      r3,r0
        MOV      r2,r0
        B        |L1.900|
|L1.750|
        SUB      r0,r9,r0
        MOV      r2,#0x3e8
        UDIV     r3,r0,r2
        MLS      r0,r2,r3,r0
        ASRS     r6,r2,#1
        UDIV     r0,r0,r6
        ADD      r3,r3,r0
        LDRH     r0,[r8,#6]
        ADD      r0,r11,r0,LSL #4
        LDRH     r0,[r0,#8]
        MULS     r0,r3,r0
        UDIV     r3,r1,r2
        MLS      r1,r2,r3,r1
        UDIV     r1,r1,r6
        ADD      r1,r1,r3
        UDIV     r3,r0,r1
        MLS      r7,r1,r3,r0
        LSRS     r1,r1,#1
        UDIV     r1,r7,r1
        ADD      r1,r1,r3
        UDIV     r3,r5,r2
        MLS      r2,r2,r3,r5
        UDIV     r2,r2,r6
        ADD      r2,r2,r3
        UDIV     r3,r0,r2
        MLS      r0,r2,r3,r0
        LSRS     r2,r2,#1
        UDIV     r0,r0,r2
        ADD      r0,r0,r3
        LDR      r3,|L1.1040|
        MOV      r5,#0xc350
        UDIV     r2,r9,r3
        MLS      r3,r3,r2,r9
        UDIV     r3,r3,r5
        ADD      r3,r3,r2
        LSLS     r2,r6,#1
        MULS     r2,r0,r2
        UDIV     r2,r2,r3
        LSLS     r5,r6,#1
        MULS     r5,r1,r5
        UDIV     r3,r5,r3
        MOV      r6,#0x10000
        SUBS     r5,r6,#1
        CMP      r1,r6
        BCC      |L1.894|
        MOV      r1,r5
|L1.894|
        CMP      r0,r6
        BCC      |L1.900|
        MOV      r0,r5
|L1.900|
        CMP      r10,#0xd
        BEQ      |L1.916|
        CMP      r10,#0xe
        BEQ      |L1.948|
        MOVS     r0,#1
        B        |L1.724|
|L1.916|
        STRH     r1,[r4,#0xc]
        STRH     r0,[r4,#0x10]
        LDRB     r0,[r4,#0x1e]
        BIC      r1,r0,#0x10
        STRB     r1,[r4,#0x1e]
        LDRH     r0,[r11,#0xd8]  ; Samp_DataArr
        CMP      r0,r3
        BHI      |L1.940|
        CMP      r0,r2
        BLS      |L1.978|
|L1.940|
        ORR      r0,r1,#0x10
        STRB     r0,[r4,#0x1e]
        B        |L1.978|
|L1.948|
        STRH     r1,[r4,#0xe]
        STRH     r0,[r4,#0x12]
        LDRB     r0,[r4,#0x1f]
        BIC      r1,r0,#0x10
        STRB     r1,[r4,#0x1f]
        LDRH     r0,[r11,#0xe8]  ; Samp_DataArr
        CMP      r0,r3
        BHI      |L1.972|
        CMP      r0,r2
        BLS      |L1.978|
|L1.972|
        ORR      r0,r1,#0x10
        STRB     r0,[r4,#0x1f]
|L1.978|
        LDR      r0,|L1.1036|
        MOVS     r1,#0
        SUBS     r0,r0,#8
        STRB     r1,[r0,#0]
        MOVS     r0,#0
        B        |L1.724|
        ENDP

FZDYU_SampData_fun PROC
        PUSH     {r4,r5,lr}
        LDR      r2,|L1.1036|
        MOV      r3,#0x4787
        LDRH     r1,[r2,#0x24]  ; Samp_DataArr
        SUB      r1,r1,#0x5000
        MULS     r1,r3,r1
        LDRH     r3,[r2,#0x28]  ; Samp_DataArr
        LDRH     r4,[r2,#0x26]  ; Samp_DataArr
        LDR      r5,|L1.1040|
        UDIV     r2,r1,r5
        MLS      r1,r5,r2,r1
        ASRS     r5,r5,#1
        UDIV     r1,r1,r5
        ADD      r1,r1,r2
        LDRB     r2,[r0,#0x20]
        B        |L1.1056|
        DCW      0x0000
|L1.1036|
        DCD      ||.data||+0x8
|L1.1040|
        DCD      0x000186a0
|L1.1044|
        DCD      0x00989680
|L1.1048|
        DCD      0x000f4240
|L1.1052|
        DCD      0xfeeeeeee
|L1.1056|
        BIC      r2,r2,#1
        STRB     r2,[r0,#0x20]
        CMP      r1,r3
        BLS      |L1.1072|
        CMP      r1,r4
        BCC      |L1.1080|
|L1.1072|
        ORR      r1,r2,#1
        STRB     r1,[r0,#0x20]
|L1.1080|
        MOVS     r0,#0
        POP      {r4,r5,pc}
        ENDP

LINKU_SampData_fun PROC
        PUSH     {r4,r5,lr}
        MOVS     r2,#0
        LDRB     r3,[r1,#1]
        LDR      r1,|L1.1904|
        ADD      r1,r1,r3,LSL #4
        LDRH     r1,[r1,#4]
        CMP      r1,#0x5000
        BCC      |L1.1154|
        SUB      r4,r1,#0x8500
        SUBS     r4,r4,#0x52
        MOV      r5,#0xc44
        CMP      r4,r5
        BLS      |L1.1156|
        SUB      r4,r1,#0x6d00
        SUBS     r4,r4,#0xec
        MOV      r2,#0x424
        CMP      r4,r2
        BHI      |L1.1136|
        MOVS     r2,#1
        B        |L1.1156|
|L1.1136|
        SUB      r1,r1,#0x6300
        SUBS     r1,r1,#0x42
        CMP      r1,r2
        BHI      |L1.1150|
        MOVS     r2,#3
        B        |L1.1156|
|L1.1150|
        MOVS     r2,#2
        B        |L1.1156|
|L1.1154|
        MOVS     r2,#2
|L1.1156|
        CMP      r3,#9
        BEQ      |L1.1184|
        CMP      r3,#0xc
        BEQ      |L1.1168|
        MOVS     r0,#1
        POP      {r4,r5,pc}
|L1.1168|
        LDRB     r1,[r0,#0x24]!
        BIC      r1,r1,#0x60
        ORR      r1,r1,r2,LSL #5
        STRB     r1,[r0,#0]
        B        |L1.1198|
|L1.1184|
        LDRB     r1,[r0,#0x25]!
        BIC      r1,r1,#6
        ORR      r1,r1,r2,LSL #1
        STRB     r1,[r0,#0]
|L1.1198|
        MOVS     r0,#0
        POP      {r4,r5,pc}
        ENDP

ADSampe_LimitDataPro PROC
        PUSH     {r4,lr}
        LDR      r2,|L1.1904|
        LDRH     r3,[r0,#0]
        LSLS     r4,r3,#8
        ORR      r3,r4,r3,LSR #8
        STRH     r3,[r2,#6]
        LDRH     r3,[r0,#2]
        LSLS     r4,r3,#8
        ORR      r3,r4,r3,LSR #8
        STRH     r3,[r2,#8]
        LDRH     r3,[r0,#4]
        LSLS     r4,r3,#8
        ORR      r3,r4,r3,LSR #8
        STRH     r3,[r2,#0x16]
        LDRH     r3,[r0,#6]
        LSLS     r4,r3,#8
        ORR      r3,r4,r3,LSR #8
        STRH     r3,[r2,#0x18]
        LDRH     r3,[r0,#8]
        LSLS     r4,r3,#8
        ORR      r3,r4,r3,LSR #8
        STRH     r3,[r2,#0x76]
        LDRH     r3,[r0,#0xa]
        LSLS     r4,r3,#8
        ORR      r3,r4,r3,LSR #8
        STRH     r3,[r2,#0x78]
        LDRH     r3,[r0,#0xc]
        LSLS     r4,r3,#8
        ORR      r3,r4,r3,LSR #8
        STRH     r3,[r2,#0x86]
        LDRH     r3,[r0,#0xe]
        LSLS     r4,r3,#8
        ORR      r3,r4,r3,LSR #8
        STRH     r3,[r2,#0x88]
        LDRH     r3,[r0,#0x10]
        LSLS     r4,r3,#8
        ORR      r3,r4,r3,LSR #8
        STRH     r3,[r2,#0x36]
        LDRH     r3,[r0,#0x12]
        LSLS     r4,r3,#8
        ORR      r3,r4,r3,LSR #8
        STRH     r3,[r2,#0x66]
        LDRH     r3,[r0,#0x14]
        LSLS     r4,r3,#8
        ORR      r3,r4,r3,LSR #8
        STRH     r3,[r2,#0xd8]
        LDRH     r3,[r0,#0x16]
        LSLS     r4,r3,#8
        ORR      r3,r4,r3,LSR #8
        STRH     r3,[r2,#0xe8]
        LDRH     r0,[r0,#0x18]
        LSLS     r2,r0,#8
        ORR      r0,r2,r0,LSR #8
        LDR      r2,|L1.1908|
        UXTH     r0,r0
        MULS     r0,r2,r0
        MOVS     r2,#0xa
        SDIV     r0,r0,r2
        STR      r0,[r1,#0xc]
        MOVS     r0,#0
        POP      {r4,pc}
        ENDP

ADSample_Scream_Col PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r1
        MOVS     r2,#4
        LDRB     r1,[r0,#0x24]
        MOVS     r6,#0
        ORR      r3,r1,#0x9f
        MOV      r1,#0xffff
        CMP      r3,#0xff
        BEQ      |L1.1420|
        STRH     r6,[r0,#0]
        STRH     r6,[r0,#4]
        STRH     r6,[r0,#8]
        STRH     r1,[r0,#0xc]
        STRH     r1,[r0,#0x10]
        LDRB     r2,[r0,#0x1d]
        BIC      r2,r2,#7
        STRB     r2,[r0,#0x1d]
        LDRB     r2,[r0,#0x1e]
        BIC      r2,r2,#0x3f
        STRB     r2,[r0,#0x1e]
        MOV      r2,#0x248d
|L1.1420|
        LDRB     r3,[r0,#0x25]
        ORR      r3,r3,#0xf9
        CMP      r3,#0xff
        BEQ      |L1.1464|
        STRH     r6,[r0,#2]
        STRH     r6,[r0,#6]
        STRH     r6,[r0,#0xa]
        STRH     r1,[r0,#0xe]
        STRH     r1,[r0,#0x12]
        LDRB     r1,[r0,#0x1d]
        BIC      r1,r1,#0x38
        STRB     r1,[r0,#0x1d]
        LDRB     r1,[r0,#0x1f]
        BIC      r1,r1,#0x3f
        STRB     r1,[r0,#0x1f]
        MOV      r0,#0x4942
        ORRS     r2,r2,r0
|L1.1464|
        LDR      r4,|L1.1904|
        SUBS     r4,r4,#8
        CBZ      r2,|L1.1492|
        MOV      r0,r2
        BL       __asm___11_AD_Sample_c_d7a81d7b__get_sampmemb
        LDRB     r1,[r4,#1]  ; lastsamp
        ADDS     r1,r1,#1
        LSRS     r2,r0,r1
        BEQ      |L1.1496|
        STRB     r1,[r4,#1]
        LSRS     r0,r0,r1
        B        |L1.1510|
|L1.1492|
        STRB     r6,[r4,#1]
        POP      {r4-r6,pc}
|L1.1496|
        STRB     r6,[r5,#0]
        STRB     r6,[r4,#1]
        POP      {r4-r6,pc}
|L1.1502|
        LSRS     r0,r0,#1
        LDRB     r2,[r4,#1]  ; lastsamp
        ADDS     r2,r2,#1
        STRB     r2,[r4,#1]
|L1.1510|
        LSLS     r1,r0,#31
        BEQ      |L1.1502|
        LDRB     r0,[r4,#1]  ; lastsamp
        STRB     r0,[r5,#0]
        POP      {r4-r6,pc}
        ENDP

ADSample_AnalogCHsel PROC
        LDR      r2,|L1.1904|
        SUBS     r2,r2,#8
        LDR      r1,[r2,#4]  ; nowchan
        CMP      r0,r1
        BNE      |L1.1534|
        MOVS     r0,#1
        BX       lr
|L1.1534|
        LDR      r1,|L1.1912|
        LDR      r3,[r1,#0xc]
        BIC      r3,r3,#0x300
        ORRS     r3,r3,r0
        STR      r3,[r1,#0xc]
        LDR      r1,|L1.1916|
|L1.1548|
        SUBS     r1,r1,#1
        CMP      r1,#0
        BNE      |L1.1548|
        STR      r0,[r2,#4]  ; nowchan
        MOVS     r0,#0
        BX       lr
        ENDP

ADSample_Change PROC
        PUSH     {r4-r10,lr}
        MOV      r4,r0
        LDR      r8,|L1.1904|
        LDRB     r0,[r4,#0]
        LDRB     r1,[r4,#1]
        ADD      r0,r8,r0,LSL #4
        ADD      r1,r8,r1,LSL #4
        LDRH     r0,[r0,#2]
        LDRH     r1,[r1,#2]
        MOV      r6,#0x400000
        LDR      r5,|L1.1912|
        LSLS     r7,r6,#1
        MOV      r9,#0x80
        MOV      r10,#0x40
        CMP      r0,r1
        BEQ      |L1.1674|
        BL       ADS7953_CHsel
        CBZ      r0,|L1.1616|
        MOVS     r0,#1
        B        |L1.302|
|L1.1616|
        LDRB     r0,[r4,#0]
        CMP      r0,#0xa
        BEQ      |L1.1658|
        CMP      r0,#0xb
        BEQ      |L1.1658|
        CMP      r0,#0xd
        BEQ      |L1.1666|
        CMP      r0,#0xe
        BEQ      |L1.1666|
        STR      r7,[r5,#0x10]
        STR      r6,[r5,#0x10]
|L1.1638|
        LDRB     r0,[r4,#0]
        ADD      r0,r8,r0,LSL #4
        LDRH     r0,[r0,#0]
        BL       ADSample_AnalogCHsel
        MOVS     r0,#2
        BL       ADS7953_CHflush
        B        |L1.1726|
|L1.1658|
        STR      r9,[r5,#0x10]
        STR      r6,[r5,#0x10]
        B        |L1.1638|
|L1.1666|
        STR      r10,[r5,#0x10]
        STR      r7,[r5,#0x10]
        B        |L1.1638|
|L1.1674|
        MOVS     r0,#1
        BL       ADS7953_CHflush
        CBZ      r0,|L1.1686|
        MOVS     r0,#1
        B        |L1.302|
|L1.1686|
        LDRB     r0,[r4,#0]
        CMP      r0,#0xa
        BEQ      |L1.1732|
        CMP      r0,#0xb
        BEQ      |L1.1732|
        CMP      r0,#0xd
        BEQ      |L1.1740|
        CMP      r0,#0xe
        BEQ      |L1.1740|
        STR      r7,[r5,#0x10]
        STR      r6,[r5,#0x10]
|L1.1708|
        LDRB     r0,[r4,#0]
        ADD      r0,r8,r0,LSL #4
        LDRH     r0,[r0,#0]
        BL       ADSample_AnalogCHsel
        MOVS     r0,#1
        BL       ADS7953_CHflush
|L1.1726|
        CBZ      r0,|L1.1748|
        MOVS     r0,#1
        B        |L1.302|
|L1.1732|
        STR      r9,[r5,#0x10]
        STR      r6,[r5,#0x10]
        B        |L1.1708|
|L1.1740|
        STR      r10,[r5,#0x10]
        STR      r7,[r5,#0x10]
        B        |L1.1708|
|L1.1748|
        LDRB     r0,[r4,#0]
        STRB     r0,[r4,#1]
        LDR      r1,|L1.1920|
        MOVS     r0,#0x2d
        STRH     r0,[r1,#0]
        LDR      r0,|L1.1924|
        LDRH     r1,[r0,#0]
        BIC      r1,r1,#1
        STRH     r1,[r0,#0]
        LDR      r1,|L1.1928|
        LDRB     r2,[r1,#0]  ; Systimememb
        ORR      r2,r2,#1
        STRB     r2,[r1,#0]
        LDRH     r1,[r0,#0]
        ORR      r1,r1,#1
        STRH     r1,[r0,#0]
        LDRB     r0,[r4,#0]
        CMP      r0,#0xe
        BCC      |L1.1798|
        MOVS     r0,#0
        STRB     r0,[r4,#0]
        B        |L1.1802|
|L1.1798|
        ADDS     r0,r0,#1
        STRB     r0,[r4,#0]
|L1.1802|
        MOVS     r0,#0
        B        |L1.302|
        ENDP

ADSample_Init PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.1932|
        LDR      r1,[r0,#0x18]
        ORR      r1,r1,#0x10
        STR      r1,[r0,#0x18]
        LDR      r0,|L1.1912|
        MOV      r1,#0x800000
        STR      r1,[r0,#0x10]
        ASRS     r1,r1,#1
        STR      r1,[r0,#0x10]
        LDR      r1,[r0,#0]
        BIC      r1,r1,#0x33000000
        STR      r1,[r0,#0]
        LDR      r1,[r0,#0]
        ORR      r1,r1,#0x22000000
        STR      r1,[r0,#0]
        LDR      r1,[r0,#0]
        BIC      r1,r1,#0xcc000000
        STR      r1,[r0,#0]
        LDR      r1,[r0,#4]
        BIC      r1,r1,#0x33
        STR      r1,[r0,#4]
        LDR      r1,[r0,#4]
        ORR      r1,r1,#0x22
        STR      r1,[r0,#4]
        LDR      r1,[r0,#4]
        BIC      r1,r1,#0xcc
        STR      r1,[r0,#4]
        LDR      r0,|L1.1904|
        LDR      r1,|L1.1904|
        ADDS     r0,r0,#0xf0
        LDRB     r0,[r0,#1]  ; Samp_ADdata_Stream
        ADD      r0,r1,r0,LSL #4
        LDRH     r0,[r0,#0]
        BL       ADSample_AnalogCHsel
        POP      {r4,lr}
        B.W      ADS7953_Init
        ENDP

|L1.1904|
        DCD      ||.data||+0x8
|L1.1908|
        DCD      0x000f4240
|L1.1912|
        DCD      0x40011000
|L1.1916|
        DCD      0x0003fffc
|L1.1920|
        DCD      ADSMstartcont
|L1.1924|
        DCD      0x40012c0c
|L1.1928|
        DCD      Systimememb
|L1.1932|
        DCD      0x40021000

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.data||, DATA, ALIGN=2

Errornum
        DCB      0x00
lastsamp
        DCB      0x00,0x00,0x00
nowchan
        DCD      0xffffffff
Samp_DataArr
        DCW      0x0300,0x0000
        DCW      0xa000,0x1db0
        DCW      0x07d0
        DCB      0x00,0x00
        DCD      MXU_SampData_fun
        DCW      0x0300,0x0000
        DCW      0xa000,0x1db0
        DCW      0x07d0
        DCB      0x02,0x00
        DCD      MXU_SampData_fun
        DCW      0x0300,0x0002
        DCW      0xa000,0x00fa
        DCW      0x00e6
        DCB      0xff,0x00
        DCD      FZDYU_SampData_fun
        DCW      0x0300,0x0003
        DCW      0xa00a,0x04e2
        DCW      0x0000
        DCB      0x04,0x00
        DCD      BATI_SampData_fun
        DCW      0x0300,0x0004
        DCW      0x0000,0x1000
        DCW      0x0000
        DCB      0xff,0x00
        DCD      HUMI_SampData_fun
        DCW      0x0300,0x0005
        DCW      0x0000,0x1000
        DCW      0x0000
        DCB      0xff,0x00
        DCD      TEMP_SampData_fun
        DCW      0x0300,0x0003
        DCW      0xa00a,0x04e2
        DCW      0x0000
        DCB      0x05,0x00
        DCD      BATI_SampData_fun
        DCW      0x0100,0x0000
        DCW      0xa000,0x1db0
        DCW      0x07d0
        DCB      0x01,0x00
        DCD      BATU_SampData_fun
        DCW      0x0100,0x0001
        DCW      0xa000,0x1db0
        DCW      0x07d0
        DCB      0x03,0x00
        DCD      BATU_SampData_fun
        DCW      0x0100,0x0002
        DCW      0xa000,0x0078
        DCW      0x0000
        DCB      0xff,0x00
        DCD      LINKU_SampData_fun
        DCW      0x0200,0x0000
        DCW      0x7800,0x0007
        DCW      0x07f8
        DCB      0xff,0x00
        DCD      JYBATP_SampData_fun
        DCW      0x0200,0x0001
        DCW      0x7800,0x0008
        DCW      0x07f8
        DCB      0xff,0x00
        DCD      JYBATP_SampData_fun
        DCW      0x0200,0x0002
        DCW      0xa000,0x0078
        DCW      0x0000
        DCB      0xff,0x00
        DCD      LINKU_SampData_fun
        DCW      0x0000,0x0000
        DCW      0x3c00,0x000a
        DCW      0x0064
        DCB      0x01,0x00
        DCD      JYRES_SampData_fun
        DCW      0x0000,0x0001
        DCW      0x3c00,0x000b
        DCW      0x0064
        DCB      0x03,0x00
        DCD      JYRES_SampData_fun
Samp_ADdata_Stream
        DCB      0x01,0x00
        DCW      0x0000
        DCW      0x0001
        DCB      0x00,0x00
        DCD      0x02faf080
        DCD      0x00e4e1c0
        DCB      0x0c,0x0a
        DCW      0x0000
        DCW      0x0000,0x0000
        DCW      0x0000
        DCB      0x00,0x00

        AREA ||area_number.5||, DATA, ALIGN=1

        EXPORTAS ||area_number.5||, ||.data||
Samp_DataStat
        DCW      0x0000,0x0000
        DCW      0x0000,0x0000
        DCW      0x0000,0x0000
        DCW      0xffff,0xffff
        DCW      0xffff,0xffff
        DCW      0x00f0,0x0000
        DCW      0x0000,0x0000
        DCB      0x0a,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00
        DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "src\\AD_Sample.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_AD_Sample_c_d7a81d7b__get_sampmemb|
#line 456
|__asm___11_AD_Sample_c_d7a81d7b__get_sampmemb| PROC
#line 457

 LDR R1, =15
 LDR R3, =0x80000000
 SUB R2, R1, #1
 ASR R3, R3, R2
 LDR R2, =32
 SUB R2, R2, R1
 LSR R3, R3, R2

 MVN R0, R0
 AND R0, R0, R3
 BX LR
	ENDP

;*** End   embedded assembler ***

        EXPORT HUMI_SampData_fun [CODE]
        EXPORT TEMP_SampData_fun [CODE]
        EXPORT BATI_SampData_fun [CODE]
        EXPORT MXU_SampData_fun [CODE]
        EXPORT BATU_SampData_fun [CODE]
        EXPORT JYBATP_SampData_fun [CODE]
        EXPORT JYBATN_SampData_fun [CODE]
        EXPORT JYRES_SampData_fun [CODE]
        EXPORT FZDYU_SampData_fun [CODE]
        EXPORT LINKU_SampData_fun [CODE]
        EXPORT ADSampe_LimitDataPro [CODE]
        EXPORT ADSample_Scream_Col [CODE]
        EXPORT ADSample_AnalogCHsel [CODE]
        EXPORT ADSample_Change [CODE]
        EXPORT ADSample_Init [CODE]
        EXPORT Samp_DataArr [DATA,SIZE=240]
        EXPORT Samp_ADdata_Stream [DATA,SIZE=28]
        EXPORT Samp_DataStat [DATA,SIZE=40]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT Cal_Val_Get [CODE]
        IMPORT ADS7953_CHsel [CODE]
        IMPORT ADS7953_CHflush [CODE]
        IMPORT ADSMstartcont [DATA]
        IMPORT Systimememb [DATA]
        IMPORT ADS7953_Init [CODE]

        KEEP Errornum
        KEEP lastsamp
        KEEP nowchan

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,5
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
